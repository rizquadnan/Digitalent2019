{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Adnan [27 1] CNN vs ANN Fashion MNIST - ADF","version":"0.3.2","provenance":[{"file_id":"1rSbDYCFKTU3roz6wGFjURoGgAGgitX8u","timestamp":1565055183199}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"EfwbLGN0zdro","colab_type":"text"},"source":["<img src = \"https://i.imgur.com/UjutVJd.jpg\" align = \"center\">"]},{"cell_type":"markdown","metadata":{"id":"Kdq4txp6In1H","colab_type":"text"},"source":["---\n","# Dataset Fashion-MNIST\n","\n","\n","Jangan lupa, pastikan Colab ini berjalan dengan GPU\n"]},{"cell_type":"code","metadata":{"id":"GrnacNg8In1K","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","np.set_printoptions(precision=7)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tz9rpwvIIn1T","colab_type":"text"},"source":["---\n","## Load Dataset FMNIST\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"e9lcWKk9In1U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"outputId":"68867e12-80bf-4d6d-d25b-b57fb2f44c46","executionInfo":{"status":"ok","timestamp":1565062118515,"user_tz":-420,"elapsed":2143,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["import tensorflow as tf\n","\n","(X_train, y_train), (X_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()\n","\n","print('X_train.shape =',X_train.shape)\n","print('y_train.shape =',y_train.shape)\n","print('X_test.shape  =',X_test.shape)\n","print('y_test.shape  =',y_test.shape)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["X_train.shape = (60000, 28, 28)\n","y_train.shape = (60000,)\n","X_test.shape  = (10000, 28, 28)\n","y_test.shape  = (10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9rhC32AWIn1Z","colab_type":"text"},"source":["---\n","## Visualisasi Data FMNIST\n"]},{"cell_type":"code","metadata":{"id":"Zk4QVV87In1b","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":289},"outputId":"75353854-2973-4eb1-fe36-3a3a40c52730","executionInfo":{"status":"ok","timestamp":1565062120349,"user_tz":-420,"elapsed":3950,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["fig, ax = plt.subplots(2,10,figsize=(15,4.5))\n","fig.subplots_adjust(hspace=0.1, wspace=0.1)\n","for j in range(0,2):\n","    for i in range(0, 10):\n","        ax[j,i].imshow(X_train[i+j*10], cmap='gray')\n","        ax[j,i].set_title(y_train[i+j*10])\n","        ax[j,i].axis('off')\n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA2cAAAD8CAYAAADzAtx4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzsnXe4XUW5/79L8VpARJBeQ0IILUAA\nFRQI0hWQCNhoXh64AiqiyEUv6FUjPxCvggULotIULl5BRIoFiFIkFGmhhV6DBRR7X78/wjvns3Jm\nss852efstU++n+fJw8ucvdeeNWtm1qz1fud9q7quZYwxxhhjjDGmtzyv1xUwxhhjjDHGGOOHM2OM\nMcYYY4xpBX44M8YYY4wxxpgW4IczY4wxxhhjjGkBfjgzxhhjjDHGmBbghzNjjDHGGGOMaQF+ODPG\nGGOMMcaYFrBYP5xVVbVeVVVXVlX1bFVV91dVNaPXdep3qqpatqqqC6uq+mNVVY9UVfX2Xtepn3F7\ndp+qqs6pqmpeVVW/q6pqblVVB/e6Tv2M+2h3qarqhVVVfe25tvx9VVW3VlW1a6/r1a9UVfWHBf79\ns6qqz/e6Xv2M+2j3qapqVlVVf0E/vbfXdep3+rlNF9uHs6qqlpB0kaTvS1pW0n9IOqeqqsk9rVj/\nc6qkv0laUdK+kr5UVdUGva1SX+P27D4nSFqrruulJe0h6RNVVW3W4zr1M+6j3WUJSY9J2lbSyyQd\nJ+n8qqrW6mGd+pa6rpeKf5JWkvRnSd/ucbX6HffR0eHd6K/r9roy44S+bNPF9uFM0hRJq0g6ua7r\nf9Z1faWkayXt39tq9S9VVS0paS9JH67r+g91XV8j6Xtym44It+foUNf1nXVd/zX+97l/E3tYpb7F\nfbT71HX9x7quP1rX9cN1Xf+rruvvS3pIkl8gLDp7SfqlpKt7XZF+xn3UmNFlcX44y1FJ2rDXlehj\nJkv6R13Xc1F2myS/RR8Zbs9RoqqqL1ZV9SdJ90iaJ+nSHlepX3EfHWWqqlpR89v5zl7XZRxwoKSz\n6rque12R8YT7aNc4oaqqX1dVdW1VVdN7XZlxQl+26eL8cHav5r9BO7qqqhdUVbWT5rvoX9LbavU1\nS0n63QJlz0p6aQ/qMh5we44SdV0frvntuLWkCyT9deHfMAXcR0eRqqpeIOmbks6s6/qeXtenn6mq\n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\n/vSnkx3S2QhMIDXnqE55HXvF8ccfn+y111472SG3ljpfnzb10fHCovRR9rUDDjgg2ZGTi2OTQWI6\nBaUZCyhrDGn+jBkzUtnpp5+ebK4RDjzwQEnl3Fzuo91nNO/1iyMLa097zowxxhhjjDGmBfjhzBhj\njDHGGGNawJjKGo0xxhhjjDHG5LHnzBhjjDHGGGNagB/OjDHGGGOMMaYF+OHMGGOMMcYYY1qAH86M\nMcYYY4wxpgX44cwYY4wxxhhjWoAfzowxxhhjjDGmBfjhzBhjjDHGGGNagB/OjDHGGGOMMaYF+OHM\nGGOMMcYYY1qAH86MMcYYY4wxpgX44cwYY4wxxhhjWoAfzowxxhhjjDGmBfjhzBhjjDHGGGNagB/O\njDHGGGOMMaYF+OHMGGOMMcYYY1qAH86MMcYYY4wxpgX44cwYY4wxxhhjWoAfzowxxhhjjDGmBfjh\nzBhjjDHGGGNagB/OjDHGGGOMMaYF+OHMGGOMMcYYY1qAH86MMcYYY4wxpgX44cwYY4wxxhhjWoAf\nzowxxhhjjDGmBfjhzBhjjDHGGGNagB/OjDHGGGOMMaYF+OHMGGOMMcYYY1qAH86MMcYYY4wxpgX4\n4cwYY4wxxhhjWoAfzowxxhhjjDGmBfjhzBhjjDHGGGNagB/OjDHGGGOMMaYF+OHMGGOMMcYYY1qA\nH86MMcYYY4wxpgX44cwYY4wxxhhjWsBi/XBWVdWyVVVdWFXVH6uqeqSqqrf3uk79TlVV61VVdWVV\nVc9WVXV/VVUzel2nfqaqqllVVf2lqqo/PPfv3l7Xqd9xm3YPtGH8+2dVVZ/vdb36Gc+h3aeqqndX\nVXVTVVV/rarqjF7Xp9/x2ml0qKrqrVVV3f1cuz5QVdXWva5Tv1NV1TrP3e/P6XVdhsNi/XAm6VRJ\nf5O0oqR9JX2pqqoNelul/qWqqiUkXSTp+5KWlfQfks6pqmpyTyvW/7y7ruulnvu3bq8rM05wm3YB\ntOFSklaS9GdJ3+5xtfoWz6GjxpOSPiHp672uyDjBa6cuU1XVjpI+KenfJb1U0jaSHuxppcYHp0q6\nsdeVGC6L7cNZVVVLStpL0ofruv5DXdfXSPqepP17W7O+ZoqkVSSdXNf1P+u6vlLStXKbGrM4sJek\nX0q6utcV6WM8h44CdV1fUNf1dyU93eu69DteO40aH5P08bqur6/r+l91XT9R1/UTva5UP1NV1Vsl\n/VbSFb2uy3BZbB/OJE2W9I+6ruei7DZJfvvTXSpJG/a6En3OCVVV/bqqqmurqpre68qME9ym3edA\nSWfVdV33uiLjDM+hpk147dRlqqp6vqTNJS3/nJT58aqqvlBV1Yt7Xbd+paqqpSV9XNL7e12XkbA4\nP5wtJel3C5Q9q/nuZDMy7tX8N+dHV1X1gqqqdpK0raSX9LZafc0xktaWtKqk0yRdXFXVxN5Wqe9x\nm3aZqqrW1Pyxfmav69LneA41bcdrp+6zoqQXSNpb0taSNpG0qaTjelmpPmempK/Vdf14rysyEhbn\nh7M/SFp6gbKlJf2+B3UZF9R1/XdJe0p6g6SnJB0l6XxJfTk42kBd17Pruv59Xdd/rev6TM2XOL2+\n1/XqZ9ymo8L+kq6p6/qhXlekn/EcavoAr526z5+f++/n67qeV9f1ryV9Rr4vjYiqqjaRtIOkk3td\nl5GyRK8r0EPmSlqiqqp16rq+77myjSXd2cM69T11Xd+u+W96JUlVVV0nv03vJrXmy5xM93CbLjoH\nSDqx15UYD3gONS3Ha6cuU9f1b6qqelzz70WpuFf1GQdMl7SWpEerqpLme3ufX1XV+nVdT+thvYbM\nYus5q+v6j5IukPTxqqqWrKrqNZLeKOns3tasv6mqampVVS+qquolVVV9QNLKks7ocbX6kqqqlqmq\naufn2nOJqqr21fwITpf3um79itu0+1RVtZXmS0QdpbELeA7tPs+N9RdJer7mL9Je9FxkTDNMvHYa\nNb4h6T1VVa1QVdXLJb1P86O2muFzmqSJmi8P3UTSlyVdImnnXlZqOCy2D2fPcbikF2u+xv9cSYfV\nde23P4vG/pLmaX6bbi9px7qu/9rbKvUtL9D88M+/kvRrSe+RtOcCG7HN8HCbdp8DJV1Q17VlTd3B\nc2j3OU7zpWMflLTfc7b384wcr526z0zND/k+V9Ldkm6RdHxPa9Sn1HX9p7qun4p/mi/F/Utd17/q\ndd2GSuXAWsYYY4wxxhjTexZ3z5kxxhhjjDHGtAI/nBljjDHGGGNMC/DDmTHGGGOMMca0AD+cGWOM\nMcYYY0wL8MOZMcYYY4wxxrSAMc3zUVVV10JDLrnkksmeOXNmsrfaaitJ0plnDuTs/NKXvtStn9U+\n++yT7IMPPjjZl112WbJPOeWUrv1eXdfF5LjdbM9usu666yZ7l112SfYzzzyT7L/85S+SpOuuuy6V\nPfHEEyP6veeSDEqSOkUfXVh7PnesVrZpm+nHPtpm3Ee7j/tod2lDH918880lSQceeGAqe/rpp5P9\n+98PZHb4xz/+IUl6xStekcp4r3j00UeTvfHGG0uSVlxxxVS2/PLLJ3u77bZb5LrnaGMfXW655ZL9\n7LPPJjvas9vEvZz39H/9618jOtai9tHnPW/Ad8E6RHmpXv/2b/+W7DXWWEOStMEGG6Sy2bNnJ/up\np55aWBWKrLnmmpKk9ddfP5VdfvlAqs5O66DSuXVirPpop/ottdRSyWbbsj3uuOMOSQNrTUlaZZVV\nkv2LX/wi2bfddtug3xjOunKkLKw97TkzxhhjjDHGmBbghzNjjDHGGGOMaQFjmoR6Ud2eX/7yl5O9\nzTbbJPv5z39+ssNVSffmr3/962Q/9thjyZ47d64k6Xe/+10qW3bZZZMdEklpwFW99NJLp7Inn3wy\n2XSzxm/8x3/8Ryp78MEHF3JmZdoodejk7r3yyiuTvcUWWyT7BS94QbJf+MIXDvre6aefnuyQlkjS\ni1/8YknS1VdfncqOOuqoZP/5z39OdvSFf/7zn9m6t0GOM95oYx/tZ9xHu4/7aHdpQx89+uijJUmv\nf/3rUxklUBMmTEj2S1/6UklNWSNl9pTs/fa3v5XUlEhOmjQpe9xu0os+ynv5zjvvLEl685vfnMoo\n4VxhhRWS/aIXvUhSc002bdq0ZFOWtt5660mS7rnnnlTGLSG33377kOs4nPXqovZR/m4nmeVXvvKV\nZHNt89e//lVSUyIbffG5OiY71pi33HJLKou1jyT9/e9/T3ZI+Sjd5RpzmWWWSfb3vvc9SdJ3vvOd\nQfWWhidx7PU8Gltm2IbRvyRps802S3asFznOKU+m3DFkzbfeemuXa7xwLGs0xhhjjDHGmJYzpgFB\nRkq8veEbKz7h8ik63gLwbQyfltdee+1kv+QlL5Ek3Xzzzalso402SjbfVIT3jW81+CbpoYceSna8\ntfj0pz+dymbMmFE6vb6j05ssviWKt5BSc6Ps3/72N0nNNzz77rtvsnNvjDbccMNUxg3JRxxxxKDf\noDfNGGPM+CKCgtFjwAAWjz/+eLJ5zwrC+7Pg3+OexTfuvHettdZayX744YdHUPOxJwJISNL555+f\n7FgDSQP3YnpP6D38wx/+kOxog+nTp6cyrq24Loj1Fddp5557brJ5Hb761a9Kkk488cTsscYiSEPu\n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\n","text/plain":["<Figure size 1080x324 with 20 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"uhUO9G5MIn1g","colab_type":"text"},"source":["---\n","## Bagi Data Validasi\n","Ambil 10,000 data terakhir dari data latih menjadi data Validasi di dalam matrix `X_val` dan `y_val`"]},{"cell_type":"code","metadata":{"id":"oCSjAqPzIn1i","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"outputId":"3575d028-fa9a-46fd-d66b-9ff4d671f832","executionInfo":{"status":"ok","timestamp":1565062120352,"user_tz":-420,"elapsed":3918,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["X_val = X_train[-10000:,:]\n","y_val = y_train[-10000:]\n","\n","X_train = X_train[:-10000, :]\n","y_train = y_train[:-10000]\n","\n","print('X_val.shape   =',X_val.shape)\n","print('y_val.shape   =',y_val.shape)\n","print('X_train.shape =',X_train.shape)\n","print('y_train.shape =',y_train.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["X_val.shape   = (10000, 28, 28)\n","y_val.shape   = (10000,)\n","X_train.shape = (50000, 28, 28)\n","y_train.shape = (50000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZonG85IOIn1o","colab_type":"text"},"source":["---\n","## Normalizing Data"]},{"cell_type":"code","metadata":{"id":"yfEl2gZJIn1p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"2c01645f-d8dd-4210-8807-d9726fdbac62","executionInfo":{"status":"ok","timestamp":1565062124547,"user_tz":-420,"elapsed":1348,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["X_train = X_train.astype('float32')\n","X_val = X_val.astype('float32')\n","X_test = X_test.astype('float32')\n","\n","# mean_image = np.mean(X_train, axis = 0)\n","# X_train -= mean_image\n","# X_val -= mean_image\n","# X_test -= mean_image\n","\n","X_train = np.expand_dims(X_train,-1)\n","X_val = np.expand_dims(X_val,-1)\n","X_test = np.expand_dims(X_test,-1)\n","\n","print('X_train.shape =',X_train.shape)\n","print('X_val.shape   =',X_val.shape)\n","print('X_test.shape  =',X_test.shape)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["X_train.shape = (50000, 28, 28, 1)\n","X_val.shape   = (10000, 28, 28, 1)\n","X_test.shape  = (10000, 28, 28, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rQohd54TIn1x","colab_type":"text"},"source":["---\n","## One Hot Matrix\n","\n"]},{"cell_type":"markdown","metadata":{"id":"kveJWXJYIn14","colab_type":"text"},"source":[" Ubah vektor target `y_train`, `y_val`, dan `y_test` menjadi bentuk One-Hot Matrix"]},{"cell_type":"code","metadata":{"id":"neQU8KqDIn1_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"74969be4-b2bf-4d1b-d061-b13606e7ffec","executionInfo":{"status":"ok","timestamp":1565062153120,"user_tz":-420,"elapsed":1878,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["from tensorflow.keras.utils import to_categorical\n","\n","y_train_hot = to_categorical(y_train.ravel(), 10)\n","y_val_hot = to_categorical(y_val.ravel(), 10)\n","y_test_hot = to_categorical(y_test.ravel(), 10)\n","\n","print('y_train_hot.shape =',y_train_hot.shape)\n","print('y_val_hot.shape   =',y_val_hot.shape)\n","print('y_test_hot.shape  =',y_test_hot.shape)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["y_train_hot.shape = (50000, 10)\n","y_val_hot.shape   = (10000, 10)\n","y_test_hot.shape  = (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OjqzwPUJIn4n","colab_type":"text"},"source":["---\n","\n","# Three-Layer Neural Network\n","\n","Berikutnya, mari kita bangun Jaringan Saraf Tiruan sedalam 3 layer untuk mengklasifikasikan dataset FMNIST ini\n"]},{"cell_type":"markdown","metadata":{"id":"34l5N13yIn5O","colab_type":"text"},"source":["---\n","## Import Modul\n","\n"]},{"cell_type":"code","metadata":{"id":"k98ABsZD_q5w","colab_type":"code","colab":{}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","num_data    = X_train.shape[0]\n","X_dim       = X_train.shape[1]\n","num_classes = y_train_hot.shape[1]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wElcpSCg_q5v","colab_type":"text"},"source":["---\n","## Model Neural Network\n"]},{"cell_type":"code","metadata":{"id":"R0xzjgWQ_q56","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":295},"outputId":"29411138-8a7c-496a-8587-110512130070","executionInfo":{"status":"ok","timestamp":1565062588320,"user_tz":-420,"elapsed":1335,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["# create model compact sequential\n","\n","model_ann = Sequential([\n","  Flatten(input_shape=(28,28,1)),\n","  Dense(500, activation=\"relu\"),\n","  Dense(200, activation=\"relu\"),\n","  Dense(num_classes, activation=\"softmax\")\n","])\n","\n","model_ann.summary()"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten_2 (Flatten)          (None, 784)               0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 500)               392500    \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 200)               100200    \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 10)                2010      \n","=================================================================\n","Total params: 494,710\n","Trainable params: 494,710\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pmDso_8jIn5V","colab_type":"text"},"source":["---\n","## Melatih Model"]},{"cell_type":"code","metadata":{"id":"lR9WhzsFIn5V","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":589},"outputId":"96843a6a-e131-4d93-f6ab-0023ba032295","executionInfo":{"status":"ok","timestamp":1565062597278,"user_tz":-420,"elapsed":6637,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["%%time\n","\n","# Compile model\n","model_ann.compile(loss='categorical_crossentropy', \n","              optimizer='adam', metrics=['accuracy'])\n","\n","\n","num_epochs = 15\n","batch_size = 1000\n","\n","hist_ann = model_ann.fit(X_train, y_train_hot, \n","          validation_data=(X_val, y_val_hot),\n","          epochs=num_epochs, batch_size=batch_size, \n","          verbose=2)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Train on 50000 samples, validate on 10000 samples\n","Epoch 1/15\n","50000/50000 - 0s - loss: 33.7243 - acc: 0.6407 - val_loss: 3.4705 - val_acc: 0.7784\n","Epoch 2/15\n","50000/50000 - 0s - loss: 2.5662 - acc: 0.7836 - val_loss: 2.0130 - val_acc: 0.7896\n","Epoch 3/15\n","50000/50000 - 0s - loss: 1.7560 - acc: 0.8000 - val_loss: 1.9428 - val_acc: 0.7784\n","Epoch 4/15\n","50000/50000 - 0s - loss: 1.5189 - acc: 0.8087 - val_loss: 1.5054 - val_acc: 0.7954\n","Epoch 5/15\n","50000/50000 - 0s - loss: 1.1345 - acc: 0.8287 - val_loss: 1.1802 - val_acc: 0.8123\n","Epoch 6/15\n","50000/50000 - 0s - loss: 1.0827 - acc: 0.8267 - val_loss: 1.1025 - val_acc: 0.8284\n","Epoch 7/15\n","50000/50000 - 0s - loss: 0.8711 - acc: 0.8428 - val_loss: 1.0519 - val_acc: 0.8335\n","Epoch 8/15\n","50000/50000 - 0s - loss: 0.7992 - acc: 0.8442 - val_loss: 0.9614 - val_acc: 0.8287\n","Epoch 9/15\n","50000/50000 - 0s - loss: 0.6994 - acc: 0.8528 - val_loss: 1.0837 - val_acc: 0.8098\n","Epoch 10/15\n","50000/50000 - 0s - loss: 0.6629 - acc: 0.8571 - val_loss: 0.8298 - val_acc: 0.8400\n","Epoch 11/15\n","50000/50000 - 0s - loss: 0.6461 - acc: 0.8587 - val_loss: 0.8932 - val_acc: 0.8245\n","Epoch 12/15\n","50000/50000 - 0s - loss: 0.5333 - acc: 0.8728 - val_loss: 0.8255 - val_acc: 0.8450\n","Epoch 13/15\n","50000/50000 - 0s - loss: 0.5165 - acc: 0.8703 - val_loss: 0.7528 - val_acc: 0.8457\n","Epoch 14/15\n","50000/50000 - 0s - loss: 0.4405 - acc: 0.8837 - val_loss: 0.7013 - val_acc: 0.8524\n","Epoch 15/15\n","50000/50000 - 0s - loss: 0.4083 - acc: 0.8855 - val_loss: 0.7085 - val_acc: 0.8517\n","CPU times: user 5.26 s, sys: 705 ms, total: 5.96 s\n","Wall time: 5.67 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3ibLtwIAIn5V","colab_type":"text"},"source":["---\n","## Evaluasi Model\n"]},{"cell_type":"code","metadata":{"id":"VTD6WFU2In5W","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"3895c0d3-703a-487b-83ee-9a957447524d","executionInfo":{"status":"ok","timestamp":1565062422638,"user_tz":-420,"elapsed":2167,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["scores_ann = model_ann.evaluate(X_test, y_test_hot, verbose=1)\n","print(\"\\nModel Accuracy: %.2f%%\" % (scores_ann[1]*100))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["10000/10000 [==============================] - 1s 56us/sample - loss: 0.8327 - acc: 0.8397\n","\n","Model Accuracy: 83.97%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ld_C6JC4olXG"},"source":["---\n","\n","# Three-Layer Convolutional Neural Network\n","Sebagai perbandingan, mari kita bangun Convolutional Neural Network yang juga hanya 3 layer\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"eTtsOpepolXN"},"source":["---\n","## Import Modul\n","\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"mYdhz2T2olXS","colab":{}},"source":["from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"D_BNctCnolXZ"},"source":["---\n","## Model Neural Network\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"n7uDuN9BolXc","colab":{"base_uri":"https://localhost:8080/","height":329},"outputId":"34a78d28-c14a-4b90-e503-3b3b30b13a57","executionInfo":{"status":"ok","timestamp":1565062604415,"user_tz":-420,"elapsed":1274,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["# create model compact sequential\n","\n","model_cnn = Sequential([\n","  Conv2D(32,(5,5), input_shape=(28,28,1), padding='same', activation=\"relu\"),\n","  Conv2D(32,(5,5), padding='same', activation=\"relu\"),\n","  MaxPooling2D(),\n","  Flatten(),\n","  Dense(num_classes, activation=\"softmax\")\n","])\n","\n","model_cnn.summary()"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_2 (Conv2D)            (None, 28, 28, 32)        832       \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 28, 28, 32)        25632     \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 14, 14, 32)        0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 6272)              0         \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 10)                62730     \n","=================================================================\n","Total params: 89,194\n","Trainable params: 89,194\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"DNJmngIeolXm"},"source":["---\n","## Melatih Model"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"j7-hIlWEolXo","colab":{"base_uri":"https://localhost:8080/","height":589},"outputId":"1821daf7-6d10-42c7-803e-ba6344b2e7ba","executionInfo":{"status":"ok","timestamp":1565062645093,"user_tz":-420,"elapsed":29469,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["%%time\n","\n","# Compile model\n","model_cnn.compile(loss='categorical_crossentropy', \n","              optimizer='adam', metrics=['accuracy'])\n","\n","\n","num_epochs = 15\n","batch_size = 1000\n","\n","hist_cnn = model_cnn.fit(X_train, y_train_hot, \n","          validation_data=(X_val, y_val_hot),\n","          epochs=num_epochs, batch_size=batch_size, \n","          verbose=2)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Train on 50000 samples, validate on 10000 samples\n","Epoch 1/15\n","50000/50000 - 2s - loss: 4.2799 - acc: 0.6705 - val_loss: 0.4737 - val_acc: 0.8292\n","Epoch 2/15\n","50000/50000 - 2s - loss: 0.4103 - acc: 0.8543 - val_loss: 0.3789 - val_acc: 0.8668\n","Epoch 3/15\n","50000/50000 - 2s - loss: 0.3412 - acc: 0.8773 - val_loss: 0.3485 - val_acc: 0.8792\n","Epoch 4/15\n","50000/50000 - 2s - loss: 0.3062 - acc: 0.8898 - val_loss: 0.3311 - val_acc: 0.8820\n","Epoch 5/15\n","50000/50000 - 2s - loss: 0.2820 - acc: 0.8977 - val_loss: 0.3207 - val_acc: 0.8888\n","Epoch 6/15\n","50000/50000 - 2s - loss: 0.2624 - acc: 0.9042 - val_loss: 0.3177 - val_acc: 0.8894\n","Epoch 7/15\n","50000/50000 - 2s - loss: 0.2482 - acc: 0.9102 - val_loss: 0.3133 - val_acc: 0.8915\n","Epoch 8/15\n","50000/50000 - 2s - loss: 0.2350 - acc: 0.9142 - val_loss: 0.3102 - val_acc: 0.8919\n","Epoch 9/15\n","50000/50000 - 2s - loss: 0.2216 - acc: 0.9189 - val_loss: 0.3071 - val_acc: 0.8934\n","Epoch 10/15\n","50000/50000 - 2s - loss: 0.2106 - acc: 0.9225 - val_loss: 0.3060 - val_acc: 0.8935\n","Epoch 11/15\n","50000/50000 - 2s - loss: 0.2024 - acc: 0.9270 - val_loss: 0.3012 - val_acc: 0.8959\n","Epoch 12/15\n","50000/50000 - 2s - loss: 0.1921 - acc: 0.9285 - val_loss: 0.3057 - val_acc: 0.8944\n","Epoch 13/15\n","50000/50000 - 2s - loss: 0.1861 - acc: 0.9322 - val_loss: 0.3147 - val_acc: 0.8934\n","Epoch 14/15\n","50000/50000 - 2s - loss: 0.1820 - acc: 0.9333 - val_loss: 0.3134 - val_acc: 0.8940\n","Epoch 15/15\n","50000/50000 - 2s - loss: 0.1732 - acc: 0.9365 - val_loss: 0.3190 - val_acc: 0.8915\n","CPU times: user 13.6 s, sys: 7.33 s, total: 20.9 s\n","Wall time: 28.2 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"0BUZEHLMolXr"},"source":["---\n","## Evaluasi Model\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"lAmucgajolXt","colab":{}},"source":["scores_cnn = model_cnn.evaluate(X_test, y_test_hot, verbose=1)\n","print(\"\\nModel Accuracy: %.2f%%\" % (scores_cnn[1]*100))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NnkdHf-gsn3R","colab_type":"text"},"source":["---\n","# Perbandingan ANN dan CNN\n","\n","Sekarang, mari kita investigasi performa ANN dan CNN"]},{"cell_type":"markdown","metadata":{"id":"_HIuWVyzssQ-","colab_type":"text"},"source":["---\n","## Jumlah Parameter"]},{"cell_type":"code","metadata":{"id":"rucd-dstsrBF","colab_type":"code","colab":{}},"source":["print('model ANN:')\n","model_ann.summary()\n","\n","print('\\n\\nmodel CNN:')\n","model_cnn.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eHpXFyZdtaLJ","colab_type":"text"},"source":["**ANN memiliki parameter hingga 4x lebih banyak dari CNN**"]},{"cell_type":"code","metadata":{"id":"cJph5BbhszSz","colab_type":"code","colab":{}},"source":["print('total parameter ANN:', f'{ model_ann.count_params():,}')\n","print('total parameter CNN:', f'{ model_cnn.count_params():,}')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AAdNRfYCuJVB","colab_type":"text"},"source":["---\n","## Grafik Hasil Pelatihan"]},{"cell_type":"code","metadata":{"id":"j6M2Nzr3uJ1S","colab_type":"code","colab":{}},"source":["fig, ax = plt.subplots(1,3,figsize=(18,3))\n","\n","ax[0].plot(hist_ann.history['loss'])\n","ax[0].plot(hist_cnn.history['loss'])\n","ax[0].set_title('Train Loss')\n","ax[0].set_ylabel('Loss')\n","ax[0].set_xlabel('Epoch')\n","ax[0].legend(['ANN', 'CNN'], loc='upper right')\n","\n","ax[1].plot(hist_ann.history['acc'])\n","ax[1].plot(hist_cnn.history['acc'])\n","ax[1].set_title('Train Accuracy')\n","ax[1].set_ylabel('Accuracy')\n","ax[1].set_xlabel('Epoch')\n","ax[1].set_ylim(bottom=.7)\n","ax[1].legend(['ANN', 'CNN'], loc='lower right')\n","\n","ax[2].plot(hist_ann.history['val_acc'])\n","ax[2].plot(hist_cnn.history['val_acc'])\n","ax[2].set_title('Validation Accuracy')\n","ax[2].set_ylabel('Accuracy')\n","ax[2].set_xlabel('Epoch')\n","ax[2].set_ylim(bottom=.7)\n","ax[2].legend(['ANN', 'CNN'], loc='lower right')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UiN4exlAtfly","colab_type":"text"},"source":["---\n","## Akurasi Data Uji"]},{"cell_type":"code","metadata":{"id":"RAbAilYSt0pD","colab_type":"code","colab":{}},"source":["print(\"Akurasi ANN: %.2f%%\" % (scores_ann[1]*100))\n","print(\"Akurasi CNN: %.2f%%\" % (scores_cnn[1]*100))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NfOgnKWBzs1L","colab_type":"text"},"source":["---\n","## Pengecekan Overfitting"]},{"cell_type":"code","metadata":{"id":"_B364ZEqzNw2","colab_type":"code","colab":{}},"source":["fig, ax = plt.subplots(1,2,figsize=(10,3))\n","\n","ax[0].plot(hist_ann.history['acc'])\n","ax[0].plot(hist_ann.history['val_acc'])\n","ax[0].set_title('ANN Accuracy')\n","ax[0].set_ylabel('Accuracy')\n","ax[0].set_xlabel('Epoch')\n","ax[0].set_ylim(bottom=.7)\n","ax[0].legend(['train', 'val'], loc='lower right')\n","\n","ax[1].plot(hist_cnn.history['acc'])\n","ax[1].plot(hist_cnn.history['val_acc'])\n","ax[1].set_title('CNN Accuracy')\n","ax[1].set_ylabel('Accuracy')\n","ax[1].set_xlabel('Epoch')\n","ax[1].set_ylim(bottom=.7)\n","ax[1].legend(['train', 'val'], loc='lower right')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W4rIhU_-8-E_","colab_type":"text"},"source":["Makin besar gap antara akurasi training dan validasi menandakan makin rentan terhadap overfitting"]},{"cell_type":"markdown","metadata":{"id":"VI0QLlzQ291a","colab_type":"text"},"source":["---\n","# Kesimpulan\n","* CNN memiliki parameter yang jauh lebih sedikit dari ANN, namun memiliki akurasi akhir yang lebih baik\n","* CNN Lebih tangguh terhadap *Overfitting*"]},{"cell_type":"markdown","metadata":{"id":"uB_ojCQ6zmKS","colab_type":"text"},"source":["<p>Copyright &copy; 2019 <a href=https://www.linkedin.com/in/andityaarifianto/>ADF</a> </p>"]}]}