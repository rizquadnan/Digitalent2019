{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Adnan [26 4] Keras dan TensorFlow - ADF","version":"0.3.2","provenance":[{"file_id":"1FLXizqZ0qLoNA2PZPI5sxTm_1omdnvs3","timestamp":1564969224310}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"EfwbLGN0zdro","colab_type":"text"},"source":["<img src = \"https://i.imgur.com/UjutVJd.jpg\" align = \"center\">"]},{"cell_type":"markdown","metadata":{"id":"nmBqvRHNuRIt","colab_type":"text"},"source":["# Perkenalan Library"]},{"cell_type":"markdown","metadata":{"id":"tvTrxlt8oQ6i","colab_type":"text"},"source":["## Tensorflow\n","\n","<img src=\"https://www.gstatic.com/devrel-devsite/va3a0eb1ff00a004a87e2f93101f27917d794beecfd23556fc6d8627bba2ff3cf/tensorflow/images/lockup.svg\" alt=\"tensorflow\" width=\"300px\"/>\n","\n","TensorFlow (https://www.tensorflow.org/) adalah *Deep Learning Library*, yang dikembangkan oleh Google Brain Team di dalam organisasi riset Google Machine Learning Intelligence, untuk keperluan melakukan pembelajaran mesin dan riset Jaringan Saraf tiruan.\n","\n","TensorFlow menggabungkan berbagai teknik optimasi komputasional aljabar untuk memudahkan perhitungan berbagai ekspresi matematika yang akan sulit untuk dihitung.\n","\n","**Fitur Utama Tensorflow*\n","\n","* Mendefinisikan, mengoptimalkan, dan menghitung secara efisien ekspresi matematika yang melibatkan array multi-dimensi (tensor).\n","* Dukungan pemrograman dari jaringan saraf dalam dan teknik pembelajaran mesin.\n","* Penggunaan komputasi GPU dan optimalisasi memori secara otomatis.\n","* Skabilitas tinggi komputasi di seluruh mesin dan set data besar.\n","\n","TensorFlow tersedia dengan dukungan Python dan C ++, tetapi Python API lebih didukung dan lebih mudah untuk dipelajari.\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"ww2VFOjloQ75","colab_type":"text"},"source":["## Keras\n","\n","<img src=\"https://s3.amazonaws.com/keras.io/img/keras-logo-2018-large-1200.png\" alt=\"keras\" width=\"300px\"/>\n","\n","Keras (https://keras.io/) adalah library *Deep Learning Library* yang sangat modular dan minimalis, yang ditulis dengan Python dan mampu berjalan di atas TensorFlow atau Theano. Library ini dikembangkan dengan fokus pada memungkinkan eksperimen cepat.\n","\n","Pada mulanya Keras dikembangkan untuk membantu pengguna agar dapat dengan mudah menggunakan *Deep Learning Library* Theano dan Tensorflow yang pada saat itu implementasinya sangat teknis dan rumit. \n","\n","Sejak Tensorflow versi 1.5, Keras diadopsi oleh Google dan sejak saat itu API yang telah dibangun sudah termasuk di dalam distribusi Tensorflow.\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"Kdq4txp6In1H","colab_type":"text"},"source":["---\n","# Dataset MNIST\n","\n","Sekarang kita akan membangun model Jaringan Saraf Tiruan menggunakan dataset paling populer digunakan saat belajar mengenai Pembelajaran Mesin: Dataset angka tulisan tangan MNIST\n","\n","Jangan lupa, pastikan Colab ini berjalan dengan GPU\n"]},{"cell_type":"code","metadata":{"id":"GrnacNg8In1K","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","np.set_printoptions(precision=7)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tz9rpwvIIn1T","colab_type":"text"},"source":["---\n","## Load Dataset MNIST\n","\n","Kelebihan menggunakan library seperti Keras dan TensorFlow adalah mereka sudah menyediakan banyak dataset contoh yang bisa langsung kita unduh dan gunakan\n","\n","Link Dataset:\n","* [keras](https://keras.io/datasets/)\n","* [tf.keras](https://www.tensorflow.org/api_docs/python/tf/keras/datasets)\n","* [tf.dataset](https://www.tensorflow.org/datasets/datasets)\n","\n","Untuk itu, di sini mari kita unduh dataset mnist dari `tf.keras` sebagai berikut\n","\n"]},{"cell_type":"code","metadata":{"id":"e9lcWKk9In1U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"outputId":"ed92fcfa-5aa9-4531-d623-667be1c3da16","executionInfo":{"status":"ok","timestamp":1564971863018,"user_tz":-420,"elapsed":1782,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["import tensorflow as tf\n","\n","(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\n","\n","print('X_train.shape =',X_train.shape)\n","print('y_train.shape =',y_train.shape)\n","print('X_test.shape  =',X_test.shape)\n","print('y_test.shape  =',y_test.shape)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["X_train.shape = (60000, 28, 28)\n","y_train.shape = (60000,)\n","X_test.shape  = (10000, 28, 28)\n","y_test.shape  = (10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9rhC32AWIn1Z","colab_type":"text"},"source":["---\n","## Visualisasi Data MNIST\n","Tampilkan 20 citra pertama dari data lain `X_train`"]},{"cell_type":"code","metadata":{"id":"Zk4QVV87In1b","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":289},"outputId":"742ef3c5-b5d8-4f2d-c1b6-5009542af9e9","executionInfo":{"status":"ok","timestamp":1564971864786,"user_tz":-420,"elapsed":3535,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["fig, ax = plt.subplots(2,10,figsize=(15,4.5))\n","fig.subplots_adjust(hspace=0.1, wspace=0.1)\n","for j in range(0,2):\n","    for i in range(0, 10):\n","        ax[j,i].imshow(X_train[i+j*10], cmap='gray')\n","        ax[j,i].set_title(y_train[i+j*10])\n","        ax[j,i].axis('off')\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"image/png":"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\njvn4tRabSPvG1NWJ6Y4xtVRKJ5XR4+QMAAAAADKAkzPN7zslSfvss4/Fm266qcX+xCzyn6w999xz\nTTS74muq3mb+ZCN+quwvAvWnGXvvvXeTzKHSxF5+leCJJ56weOmll857m1hs5bDDDivGlCpCLCyU\nrzehVL4FQZo1ayZJGjBggI3169fP4h9//NHi008/XVLuY+FPy/xF67EgReyNJuX24uzbt6/F8ZPe\nli1b2pgvTtSrVy+LY8+kJ598Mu9/j78Yvn379nlvU6piH0r/6Xx1YmGlk046qUnnVM523HHHtKdQ\ncnyv08gXsPDF08qRf//nCyj556XaxMIeUv7CSQceeKDFvhhO5DO20sbJGQAAAABkAJszAAAAAMiA\niktr7NSpk8XHHXecpNyLgVdYYYUav//XX3+12BfLqK2XUhb5I3Mf+95HJ554YqN+xsknn2zxWWed\nZfFSSy0lKfeC9UMOOaRRPwuVrXXr1hZX9/d47bXXSspecZlS5nshVZKY/uZTGWfNmmWxT6GLKbd/\n+tOfbKxPnz4W77zzzhbHNNHzzz/fxvyF8PnSfGbOnGnxY489ljeOKT2+R5Dnn6vLzeTJk9OeQqp8\nYQlfLMn3z/vpp58a9TP8er7yyisbdV+VKKb1+bW65pprWuzTbH2/1XLR0DUT30tK0r777mtxTPX2\nhT1GjRrVwNkVHydnAAAAAJABbM4AAAAAIAPKNq3Rpyf6Ci0xlVGS2rVrV+f7e+WVVyTl9gBpqqqG\nxeIrqvnYP3ZXXXWVJOmWW26xsa+//tpin6bTu3dvSdIGG2xgY6ussorFvndFTIWKaWYoHJ+i2rFj\nR4tjpcJyE1O+Flqo9s+aXnzxxaaeTsWp1MpsZ5999gJjsYKjlNvnLPZ9WmONNWq933jbwYMH25hP\np2+oO++8M+d/K0nsKef7IK2++up5bxtT+X0furR7HjXU1ltvLUk688wzbax79+4W+6qc9amKt8wy\ny0iSevToYWOXXXaZxc2bN1/ge3za5OzZs+v8syqNrzq88sorW/zXv/41jelknk/x9JVsv/zyS0lS\n165diz6nQuDkDAAAAAAygM0ZAAAAAGRAWaQ1tmnTxuK1115b0vxGnlJuxZvavPzyyxZfcsklFsdK\nOqVYlbG+fGpOPDL2TaF9ZbAOHTrUeF8+jSw2TJXypwShMHyKal1S/UqRb2jerVs3Sbl/m3PnzrX4\nmmuusfiLL74owuwqy2qrrZb2FFLx+eefS5KWW245G/ONYn16d/TII49Y/Nxzz1k8ZswYiz/44ANJ\nhUllRK4333zT4urWbTm9xsf3Qfka8krS3/72N4u///77Ot9vTI3caKONbMy/7njjxo2TJF133XU2\n5t8LoHr+MfWvaZWubdu2Fh955JEW+8frxhtvlJStxtL1UZ7v3AAAAACgxJTUyVm8CFWSbrjhBov9\np+j1+RQ3nupceumlNuZ79jS270fW/etf/7J4woQJFm+66aYL3NYXCfEnlV4sFHLXXXfZWGP7pKFx\ntthiC4tvvfXW9CZSYK1atbI4X2/CTz75xGLfhwqF9/zzz0vKPaUtp9OH6myzzTaScvtC+pOEeEG6\nNL+g0owZM2yMT8KLL36aLkm77rprijPJBl9AobH8en/wwQctju8BKAJSf7FXlyTtvvvuFt9///1p\nTCcznnzySYv9KdrIkSMtPuecc4o6p0Lj5AwAAAAAMoDNGQAAAABkQGbTGjfffHOLY7+YzTbbzMZ8\n/4fazJo1y+LYt0uSLrjgAknSjz/+2OB5ljJ/oeRee+1l8dFHH21x//79a7yPK6+80uJ4we/UqVML\nNUU0gO9zBjS1iRMnSpLeeecdG/Pp5b6f1PTp04s3sSYWCyiMGDHCxnyM7HnrrbcsnjRpksVrrbVW\nGtNpcocddpik3P5uhx56aIPuy/d6i++pYkqzlJsyGp8TUH/77befxXPmzLHYr9dKF3ubStKAAQMs\njoX7ygEnZwAAAACQAWzOAAAAACADQnW9KZrkh4VQ5x924YUXWhzTGqvjUxUeeughSdIvv/xiY74a\n47ffflvXKWRCkiTV5qjV5/FElZoeT6m0H9OYwhIrw0nSTTfdZLFPVy2kNNaor9B49913S5K23npr\nG3v//fctXmONNZpiCk2mVNdoXH+SdPPNN1v87LPPWhzTq/xzdjHwPFpYpbpGs6wp16jvv+f/TgcO\nHGjx0ksvLSm3556viudTxmKPvywr1TXqq137dNvddtvN4g8//LCoc4p4Hi2smh5PTs4AAAAAIAPY\nnAEAAABABmQ2rRFVOEYurFJNdcgy1mhhleoa9Q1TR40aZXG3bt0sHj16tCSpT58+NlaMarms0cIq\n1TWaZazRwmKNFh5rtLBIawQAAACAjOPkLOP4pKKw+DSt8FijhVUOa9Sfog0aNMjivn37SpLWX399\n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\nszGfdn7JJZdY7N8PRGuuuabF//73vy2Ozx1nn322jZ1//vmNn3AJ8q8vJ5xwgsX+9Tnyz7n53kdd\neOGFFvuUUf+cHItk+TVezhZffHGLY3ru//73Pxvbb7/9LE4rlbFUxUub/KVIf//73y32abhR//79\nLR48eHATzq52nJwBAAAAQAawOQMAAACADCjbao3Vef311y3eYIMNJEkTJ060MX+Mn8/qq69u8Xvv\nvVfg2S2o3KvjdOvWzWKfXuZTGJdaailJUl3W6ttvvy1pfrrP7zW2gpP//fs0jvhzPZ8G9tlnn9V0\nt7XyPdN82kO+9JGbbrrJYt/vr6lkcY0OGDDA4jPOOMPiRx99VJJ0zDHH2Fh9+s0VQylUGdt7770t\nvueeeyRJI0eOtLFDDjmk6HOqSRbXqLfttttaHF+D/Niee+5pcb7U3Or4VKipU6dKKkwVwrTWaPfu\n3S2OaY2jRo2yMf+6UR8+bTGmNn344Yc21r59+wbdb31kcY36VMbLL7+8xtvOmTPH4vicIM3vEZsv\njUzKXc/xecM/lzRUKTyP+tTb4447TpLUoUMHG6NfZP34ysxxvfrKn/XZ74wYMcLiprpMhmqNAAAA\nAJBxbM4AAAAAIAPKtlpjdQYOHGjxmWeeKUnq3Llznb+/UqoINQXfLHS99daTJG266aa1fl9sQnnH\nHXfY2IQJEyz2zYJnz57d6HnW5N13380bN7VddtnF4uoqisa0Ep/WWEl8o1n/N+0rVp588smSspfK\nWGp8dbvIVxY77bTTLG5sSm+pWnHFFS2Oz1GrrbZa3tvG1G1pfkNkn+71n//8x+KNNtqoznNYaKH5\nn7/6RsulauGF579liWmad911V6Pv995777U4pjX6SnotW7a0eObMmY3+eVl27rnnWnzqqafmvc1t\nt90mSZo+fbqNDRkyxGI/Hp+LH3/8cRuLDcR/f1v/eyhXiy22mMUHH3ywxePGjZOUvVTGrPNryb/3\niZe2+PU1ZswYi31l5phOu++++9qYT5H07/vnzp1biGnXipMzAAAAAMiAijs585/MjB8/XlJuv7J4\nolMdf/K2zz77FHh25aF169YW+14Rhx9+uMWx74z/RNj3QfFFWn766SdJuf3oypn/lOaqq66SVLcC\nC1tssYWk3KI3lWD33XeXJG2++eY25i/89RenN/XJaiWKJzx+3e62224W33DDDUWfU1p8gSP/Ke4f\n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\n","text/plain":["<Figure size 1080x324 with 20 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"uhUO9G5MIn1g","colab_type":"text"},"source":["---\n","## Bagi Data Validasi\n","Ambil 10,000 data terakhir dari data latih menjadi data Validasi di dalam matrix `X_val` dan `y_val`"]},{"cell_type":"code","metadata":{"id":"oCSjAqPzIn1i","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"outputId":"b2d138c2-1f79-4486-b8bd-7bdeede58b31","executionInfo":{"status":"ok","timestamp":1564971864788,"user_tz":-420,"elapsed":3517,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["X_val = X_train[-10000:,:]\n","y_val = y_train[-10000:]\n","\n","X_train = X_train[:-10000, :]\n","y_train = y_train[:-10000]\n","\n","print('X_val.shape   =',X_val.shape)\n","print('y_val.shape   =',y_val.shape)\n","print('X_train.shape =',X_train.shape)\n","print('y_train.shape =',y_train.shape)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["X_val.shape   = (10000, 28, 28)\n","y_val.shape   = (10000,)\n","X_train.shape = (50000, 28, 28)\n","y_train.shape = (50000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZonG85IOIn1o","colab_type":"text"},"source":["---\n","## Normalizing Data\n","Normalisasi `X_train`, `X_val`, dan `X_test` dengan melakukan *zero-mean centering* "]},{"cell_type":"code","metadata":{"id":"yfEl2gZJIn1p","colab_type":"code","colab":{}},"source":["X_train = X_train.astype('float32')\n","X_val = X_val.astype('float32')\n","X_test = X_test.astype('float32')\n","\n","mean_image = np.mean(X_train, axis = 0)\n","X_train -= mean_image\n","X_val -= mean_image\n","X_test -= mean_image"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wSqe0RcLIv4E","colab_type":"text"},"source":["Jika kalian tertarik melihat bagaimana visualisasi data MNIST setelah dilakukan normalisasi *zero-mean centering*"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"kE_nDasqebxp","colab":{"base_uri":"https://localhost:8080/","height":289},"outputId":"9bf7adf6-28d0-458c-d7c3-d6819143e311","executionInfo":{"status":"ok","timestamp":1564971943435,"user_tz":-420,"elapsed":2927,"user":{"displayName":"Muhammad Adnan","photoUrl":"https://lh5.googleusercontent.com/-x59cso3slZA/AAAAAAAAAAI/AAAAAAAAAAc/SK2WAOSPlbQ/s64/photo.jpg","userId":"10968586867277709725"}}},"source":["fig, ax = plt.subplots(2,10,figsize=(15,4.5))\n","fig.subplots_adjust(hspace=0.1, wspace=0.1)\n","for j in range(0,2):\n","    for i in range(0, 10):\n","        ax[j,i].imshow(X_train[i+j*10], cmap='gray')\n","        ax[j,i].set_title(y_train[i+j*10])\n","        ax[j,i].axis('off')\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<Figure size 1080x324 with 20 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"rQohd54TIn1x","colab_type":"text"},"source":["---\n","## One Hot Matrix\n","\n"]},{"cell_type":"markdown","metadata":{"id":"kveJWXJYIn14","colab_type":"text"},"source":[" Ubah vektor target `y_train`, `y_val`, dan `y_test` menjadi bentuk One-Hot Matrix"]},{"cell_type":"code","metadata":{"id":"neQU8KqDIn1_","colab_type":"code","colab":{}},"source":["from tensorflow.keras.utils import to_categorical\n","\n","y_train_hot = to_categorical(y_train.ravel(), 10)\n","y_val_hot = to_categorical(y_val.ravel(), 10)\n","y_test_hot = to_categorical(y_test.ravel(), 10)\n","\n","print('y_train_hot.shape =',y_train_hot.shape)\n","print('y_val_hot.shape   =',y_val_hot.shape)\n","print('y_test_hot.shape  =',y_test_hot.shape)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"J_xTz69xIn2G","colab_type":"text"},"source":["contoh isi dari one hot matrix"]},{"cell_type":"code","metadata":{"id":"Gl6iGzGgIn2I","colab_type":"code","colab":{}},"source":["print('\\n         class:\\ni | y |  0 1 2 3 4 5 6 7 8 9\\n---------------------------------')\n","for i in range(10):\n","    print(i, '|', y_train[i], '|', y_train_hot[i,:].astype('int'))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OjqzwPUJIn4n","colab_type":"text"},"source":["---\n","\n","# Two-Layer Neural Network\n","\n","Berikutnya, mari kita bangun Jaringan Saraf Tiruan sedalam 2 layer untuk mengklasifikasikan dataset MNIST ini\n","\n","Untuk kemudahan bersama, di sini kita akan gunakan API Keras untuk membangun arsitektur hingga melatih modelnya\n","\n"]},{"cell_type":"markdown","metadata":{"id":"34l5N13yIn5O","colab_type":"text"},"source":["---\n","## Import Modul\n","\n","Untuk membangun Jaringan Saraf Tiruan sederhana, kita akan menggunakan model [`Sequential`](https://keras.io/models/sequential/) karena model hanya memiliki satu arah propagasi maju.\n","\n","Layer-layer yang akan kita gunakan adalah:\n","* `Flatten`, untuk mengubah input data citra menjadi 1 kolom\n","* `Dense`, atau layer `Affine`\n","* `Activation`, untuk mendapatkan fungsi Aktivasi\n","\n","Daftar layer lainnya dapat dilihat di [keras layers](https://keras.io/layers/core/) atau [tf.keras layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers)"]},{"cell_type":"code","metadata":{"id":"k98ABsZD_q5w","colab_type":"code","colab":{}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Activation\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xorwvaALLAGH","colab_type":"text"},"source":["Berikutnya, kita definisikan paramtere arsitektur sebagai berikut\n","\n","kita akan bangun jaringan saraf 2 layer dengan 512 neuron di hidden layer"]},{"cell_type":"code","metadata":{"id":"LKMOAG1KIn5B","colab_type":"code","colab":{}},"source":["num_data    = X_train.shape[0]\n","X_dim       = X_train.shape[1]\n","num_classes = y_train_hot.shape[1]\n","\n","hidden_size = 512"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wElcpSCg_q5v","colab_type":"text"},"source":["---\n","## Membangun Model Jaringan menggunakan Keras\n","\n","Keras adalah *Deep Learning* API yang dibangun sebagai *independent open source project* oleh lebih dari 700 kontributor. Selama pembangunannya hingga, Keras terus diperbarui sehingga sering terdapat perubahan di sisi teknis penulisan kode. Salah satunya adalah cara mendefinisikan model jaringan.\n"]},{"cell_type":"markdown","metadata":{"id":"Sr6j43J3Lq9V","colab_type":"text"},"source":["### Cara Pertama (OLD API)\n","Cara pertama membangun model, dan salah satu cara paling tua, menggunakan Keras adalah dengan menginisialisasi objek model `Sequential`, kemudian satu per satu kita tambahkan layer yang ingin kita tumpuk sebagai berikut\n"]},{"cell_type":"code","metadata":{"id":"31erMNe__q51","colab_type":"code","colab":{}},"source":["# create model old\n","model = Sequential()\n","model.add(Flatten(input_shape=(28,28)))\n","model.add(Dense(hidden_size))\n","model.add(Activation('sigmoid'))\n","model.add(Dense(num_classes))\n","model.add(Activation('softmax'))\n","    \n","  \n","model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yiat15JzIM5u","colab_type":"text"},"source":["### Cara Kedua (Compact API)\n","\n","Update terbaru pada API layer Keras membuat kita bisa menambahkan fungsi aktivasi langsung dari layer `Dense` tanpa menambahkan layer `Activation`. Contohnya `Dense(512, activation=\"sigmoid\")`"]},{"cell_type":"code","metadata":{"id":"K3oJwZl5IGmg","colab_type":"code","colab":{}},"source":["# create model new\n","model = Sequential()\n","model.add(Flatten(input_shape=(28,28)))\n","model.add(Dense(hidden_size, activation='sigmoid'))\n","model.add(Dense(num_classes, activation='softmax'))\n","    \n","  \n","model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZY1O_Jx_q52","colab_type":"text"},"source":["### Cara Ketiga (Functional API)\n","Cara ketiga membangun model adalah menggunakan Keras *functional API* yang memungkinkan kita membangun model yang lebih kompleks misalnya memiliki banyak output.\n","\n","Berikut adalah contoh pembangunan model adalah menggunakan Keras *functional API*"]},{"cell_type":"code","metadata":{"id":"HNlMwWsI_q54","colab_type":"code","colab":{}},"source":["from tensorflow.keras import Model\n","from tensorflow.keras.layers import Input\n","\n","# create model functional\n","inputs = Input(shape=(28, 28))\n","x = Flatten() (inputs)\n","x = Dense(hidden_size, activation=\"sigmoid\")(x)\n","outputs = Dense(num_classes, activation=\"softmax\")(x)\n","\n","\n","mdoel = Model(inputs, outputs)\n","\n","model.summary()\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n5BBi5KC_q56","colab_type":"text"},"source":["### Cara Keempat (Constructor API)\n","Cara keempat adalah cara baru membangun `Sequential` model. Penggunaannya seperti cara pertama dan kedua, namun kita dapat langsung mendaftarkan layer-layernya ke dalam list saat inisialisasi objek Sequential sebagai berikut"]},{"cell_type":"code","metadata":{"id":"R0xzjgWQ_q56","colab_type":"code","colab":{}},"source":["# create model compact sequential\n","\n","model = Sequential([\n","  Flatten(input_shape=(28,28)),\n","  Dense(hidden_size, activation=\"sigmoid\"),\n","  Dense(num_classes, activation=\"softmax\")\n","])\n","\n","\n","model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TJrNchsf_q58","colab_type":"text"},"source":["Keempat model di atas adalah model yang sama. Bisa dilihat dari summary arsitektur kegianya. Sekarang, pilih salah satu model untuk kita compile dengan fungsi *loss* dan metode optimasi. "]},{"cell_type":"markdown","metadata":{"id":"VnbdwDn0In5R","colab_type":"text"},"source":["---\n","## Compile Model\n","\n","Di sini kita harus mengkompile model dengan mendaftarkan fungsi loss dan fungsi optimasinya\n","\n","### Fungsi Loss\n","terdapat berbagai jenis fungsi loss untuk bermacam kasus seperti \n","* `categorical crossentropy` untuk klasifikasi multi kelas\n","* `binary crossentropy` untuk klasifikasi biner\n","* `mean squared error` untuk regresi\n","* dan banyak lainnya\n","\n","lihat [keras losses](https://keras.io/losses/) atau [tf.keras losses](https://www.tensorflow.org/api_docs/python/tf/keras/losses) untuk lebih lanjut\n","\n","\n","### Fungsi Optimasi\n","Juga terdapat berbagai jenis fungsi optimasi seperti\n","* `sgd` untuk standar `stochastic gradient descent` dan `nesterov`\n","* `rmsprop` sebagai perkembangan dari `sgd`\n","* `adam` sebagai fungsi optimasi standar saat ini\n","* dan banyak lainnya\n","\n","lihat [keras optimizers](https://keras.io/optimizers/) atau [tf.keras optimizers](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers) untuk lebih lanjut\n","\n","### Metrics\n","kita juga bisa menambahkan metric tambahan untuk melihat performa model selama pelatihan seperti metrik akurasi"]},{"cell_type":"code","metadata":{"id":"LPnszjanIn5R","colab_type":"code","colab":{}},"source":["# Compile model\n","model.compile(loss='categorical_crossentropy', \n","              optimizer='sgd', metrics=['accuracy'])\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pmDso_8jIn5V","colab_type":"text"},"source":["---\n","## Melatih Model\n","\n","Sekarang kita bisa melatih model dengan memanggil fungsi `fit`\n","\n","Kita jalankan proses pelatihan untuk `epoch=15` dengan `batch size=100`"]},{"cell_type":"code","metadata":{"id":"lR9WhzsFIn5V","colab_type":"code","colab":{}},"source":["num_epochs = 15\n","batch_size = 100\n","\n","model.fit(X_train, y_train_hot, \n","          validation_data=(X_val, y_val_hot),\n","          epochs=num_epochs, batch_size=batch_size, \n","          verbose=2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3ibLtwIAIn5V","colab_type":"text"},"source":["---\n","## Evaluasi Model\n","Berikutnya mari kita evaluasi akurasi dari model yang sudah dilatih\n","\n","harusnya kita akan mendapatkan akurasi di atas `91%`"]},{"cell_type":"code","metadata":{"id":"VTD6WFU2In5W","colab_type":"code","colab":{}},"source":["scores = model.evaluate(X_test, y_test_hot, verbose=1)\n","print(\"\\nModel Accuracy: %.2f%%\" % (scores[1]*100))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RSOdNkm_In4B","colab_type":"text"},"source":["---\n","# Pengujian Data Baru\n","\n","Sekarang mari kita coba model yang sudah kita latih terhadap data baru\n","\n","kita akan bangun fungsi untuk bisa menggambar di Google Colab ini dan memasukkan input gambar baru ke model"]},{"cell_type":"markdown","metadata":{"id":"U9SEiqSuIn4I","colab_type":"text"},"source":["## Fungsi Menggambar pada Canvas\n","\n","Jalankan cell di bawah untuk membangun fungsi menggambar"]},{"cell_type":"code","metadata":{"id":"h8A9d-_-Psxi","colab_type":"code","colab":{}},"source":["from IPython.display import HTML, Image\n","from google.colab.output import eval_js\n","from base64 import b64decode\n","\n","canvas_html = \"\"\"\n","<canvas width=%d height=%d style=\"border:1px solid #000000;\"></canvas>\n","<button>Finish</button>\n","<script>\n","var canvas = document.querySelector('canvas')\n","var ctx = canvas.getContext('2d')\n","ctx.lineWidth = %d\n","var button = document.querySelector('button')\n","var mouse = {x: 0, y: 0}\n","canvas.addEventListener('mousemove', function(e) {\n","  mouse.x = e.pageX - this.offsetLeft\n","  mouse.y = e.pageY - this.offsetTop\n","})\n","canvas.onmousedown = ()=>{\n","  ctx.beginPath()\n","  ctx.moveTo(mouse.x, mouse.y)\n","  canvas.addEventListener('mousemove', onPaint)\n","}\n","canvas.onmouseup = ()=>{\n","  canvas.removeEventListener('mousemove', onPaint)\n","}\n","var onPaint = ()=>{\n","  ctx.lineTo(mouse.x, mouse.y)\n","  ctx.stroke()\n","}\n","var data = new Promise(resolve=>{\n","  button.onclick = ()=>{\n","    resolve(canvas.toDataURL('image/png'))\n","  }\n","})\n","</script>\n","\"\"\"\n","\n","def draw(filename='drawing.jpg', w=300, h=300, line_width=20):\n","  display(HTML(canvas_html % (w, h, line_width)))\n","  data = eval_js(\"data\")\n","  binary = b64decode(data.split(',')[1])\n","  with open(filename, 'wb') as f:\n","    f.write(binary)\n","  print('gambar baru diterima')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KNY6fN3rO1tq","colab_type":"text"},"source":["---\n","## Input Gambar Baru\n","Sekarang, jalankan cell di bawah, lalu coba gambar (tuliskan) input angka baru\n","\n","setelah selesai, klik tombol `Finish`\n","\n","usahakan gambar angka cukup besar, namun tidak menyentuh garis tepi"]},{"cell_type":"code","metadata":{"id":"Yuoa-o-iPuu0","colab_type":"code","colab":{}},"source":["draw()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lAYfRaTTPQHL","colab_type":"text"},"source":["---\n","## Resize Data\n","Sekarang, ubah data menjadi Grayscale, dan resize data menjadi ukuran yang sama dengan data latih, yaitu `28x28`"]},{"cell_type":"code","metadata":{"id":"LhRUopEnP5Z0","colab_type":"code","colab":{}},"source":["from PIL import Image\n","import cv2 as cv\n","\n","new_img = Image.open('drawing.jpg')\n","new_img = np.array(new_img)[:,:,3]\n","print('ukuran awal = ',new_img.shape)\n","\n","new_img2 = cv.resize(new_img, (28, 28),interpolation = cv.INTER_AREA) \n","print('ukuran baru = ',new_img2.shape)\n","\n","plt.imshow(new_img2, cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9r55v1r5P39Y","colab_type":"text"},"source":["---\n","## Normalisasi Data\n","Jangan lupa, sebelum memasukkan data ke model untuk diprediksi, lakukan *zero-mean centering* menggunakan rata-rata data latih"]},{"cell_type":"code","metadata":{"id":"_3vPTdq7UDJf","colab_type":"code","colab":{}},"source":["new_img3 = new_img2.astype('float32')\n","new_img3 -= mean_image\n","\n","plt.imshow(new_img3, cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6sYxS6yBQDxB","colab_type":"text"},"source":["## Prediksi Data\n","\n","Sekarang kita tinggal memprediksi data baru tersebut\n","\n","Coba lihat, apakah model sudah pintar\n","\n","jika belum, lanjutkan proses pelatihan dengan menjalankan cell yang memanggil fungsi `fit`"]},{"cell_type":"code","metadata":{"id":"EJNH_1OOUfNZ","colab_type":"code","colab":{}},"source":["y_pred = model.predict(new_img3.reshape((1,28,28)))\n","print(\"Prediksi data baru: y = \" + str(np.argmax(y_pred)))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uB_ojCQ6zmKS","colab_type":"text"},"source":["<p>Copyright &copy; 2019 <a href=https://www.linkedin.com/in/andityaarifianto/>ADF</a> </p>"]}]}